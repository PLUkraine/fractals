#include "qimageproxy.h"

QImageProxy::QImageProxy(QSize s) : _image(s, QImage::Format_ARGB32_Premultiplied)
{
}

void QImageProxy::resetImage(QSize s)
{
    std::unique_lock<std::mutex> lock(_imageMutex);
    _image = QImage(s, QImage::Format_ARGB32_Premultiplied);
    _image.fill(Qt::transparent);
}

void QImageProxy::paintOnImage(QLineF line)
{
    std::unique_lock<std::mutex> lock(_imageMutex);
    QPainter painter;
    painter.begin(&_image);
    painter.drawLine(line);
    painter.end();
}

void QImageProxy::paintImage(QPainter painter)
{
    std::unique_lock<std::mutex> lock(_imageMutex);
    QPainter painter;
    painter.drawImage(0,0,_image);
}

QImageProxy::~QImageProxy()
{

}

